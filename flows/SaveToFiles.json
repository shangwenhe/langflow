{"data":{"edges":[],"nodes":[{"data":{"id":"SaveToFile-V8l13","type":"SaveToFile","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import json\nimport os\nimport unicodedata\n\nfrom langflow.custom import Component\nfrom langflow.inputs import BoolInput, MessageTextInput\nfrom langflow.schema.message import Message\nfrom langflow.template import Output\n\n\nclass SaveFilesComponent(Component):\n    display_name = \"Save to Files\"\n    description = \"将输出的JSON格式存在到文件中\"\n    icon = \"save\"\n    name = \"SaveToFile\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"json_str\", display_name=\"JSON String\", info=\"The JSON string to be cleaned.\", required=True\n        ),\n        BoolInput(\n            name=\"remove_control_chars\",\n            display_name=\"Remove Control Characters\",\n            info=\"Remove control characters from the JSON string.\",\n            required=False,\n        ),\n        BoolInput(\n            name=\"normalize_unicode\",\n            display_name=\"Normalize Unicode\",\n            info=\"Normalize Unicode characters in the JSON string.\",\n            required=False,\n        ),\n        BoolInput(\n            name=\"validate_json\",\n            display_name=\"Validate JSON\",\n            info=\"Validate the JSON string to ensure it is well-formed.\",\n            required=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Cleaned JSON String\", name=\"output\", method=\"clean_json\"),\n    ]\n\n    def clean_json(self) -> Message:\n        try:\n            from json_repair import repair_json\n        except ImportError as e:\n            msg = \"Could not import the json_repair package. Please install it with `pip install json_repair`.\"\n            raise ImportError(msg) from e\n\n        \"\"\"Clean the input JSON string based on provided options and return the cleaned JSON string.\"\"\"\n        json_str = self.json_str\n        remove_control_chars = self.remove_control_chars\n        normalize_unicode = self.normalize_unicode\n        validate_json = self.validate_json\n\n        start = json_str.find(\"{\")\n        end = json_str.rfind(\"}\")\n        if start == -1 or end == -1:\n            msg = \"Invalid JSON string: Missing '{' or '}'\"\n            raise ValueError(msg)\n        try:\n            json_str = json_str[start : end + 1]\n\n            if remove_control_chars:\n                json_str = self._remove_control_characters(json_str)\n            if normalize_unicode:\n                json_str = self._normalize_unicode(json_str)\n            if validate_json:\n                json_str = self._validate_json(json_str)\n\n            cleaned_json_str = repair_json(json_str)\n            result = str(cleaned_json_str)\n            \n            data = json.loads(result)\n            print(data)\n            # self._save_files(data)\n            \n            \n            # 指定保存文件的目录\n            base_dir = '/app/data/components/'\n            # 确保目录存在，如果不存在则创建\n            os.makedirs(base_dir, exist_ok=True)\n        \n            for item in data.get('files'):\n                # 获取文件名\n                file_path = item.get('file')\n                # 获取文件内容\n                content = item.get('content')\n        \n                if file_path and content:\n                    # 提取文件名\n                    file_name = os.path.basename(file_path)\n                    # 提取文件路径中的目录部分\n                    relative_dir = os.path.dirname(file_path)\n                    # 拼接完整的保存目录\n                    save_dir = os.path.join(base_dir, relative_dir.strip('./'))\n                    # 确保保存目录存在，如果不存在则创建\n                    os.makedirs(save_dir, exist_ok=True)\n                    # 拼接完整的文件保存路径\n                    full_path = os.path.join(save_dir, file_name)\n        \n                    try:\n                        with open(full_path, 'w', encoding='utf-8') as file:\n                            file.write(content)\n                        print(f\"成功保存文件: {full_path}\")\n                    except Exception as e:\n                        print(f\"保存文件 {full_path} 时出错: {e}\")\n            \n            \n            \n            \n\n            self.status = result\n            return Message(text=result)\n        except Exception as e:\n            msg = f\"Error cleaning JSON string: {e}\"\n            raise ValueError(msg) from e\n\n    def _save_files(data):\n        # 指定保存文件的目录\n        base_dir = '/app/data/components/'\n        # 确保目录存在，如果不存在则创建\n        os.makedirs(base_dir, exist_ok=True)\n    \n        for item in data:\n            # 获取文件名\n            file_path = item.get('file')\n            # 获取文件内容\n            content = item.get('content')\n    \n            if file_path and content:\n                # 拼接完整的文件路径\n                full_path = os.path.join(base_dir, os.path.basename(file_path))\n                try:\n                    # 以写入模式打开文件\n                    with open(full_path, 'w', encoding='utf-8') as file:\n                        # 将内容写入文件\n                        file.write(content)\n                    print(f\"成功保存文件: {full_path}\")\n                except Exception as e:\n                    print(f\"保存文件 {full_path} 时出错: {e}\")\n\n    def _remove_control_characters(self, s: str) -> str:\n        \"\"\"Remove control characters from the string.\"\"\"\n        return s.translate(self.translation_table)\n\n    def _normalize_unicode(self, s: str) -> str:\n        \"\"\"Normalize Unicode characters in the string.\"\"\"\n        return unicodedata.normalize(\"NFC\", s)\n\n    def _validate_json(self, s: str) -> str:\n        \"\"\"Validate the JSON string.\"\"\"\n        try:\n            json.loads(s)\n        except json.JSONDecodeError as e:\n            msg = f\"Invalid JSON string: {e}\"\n            raise ValueError(msg) from e\n        return s\n\n    def __init__(self, *args, **kwargs):\n        # Create a translation table that maps control characters to None\n        super().__init__(*args, **kwargs)\n        self.translation_table = str.maketrans(\"\", \"\", \"\".join(chr(i) for i in range(32)) + chr(127))\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"json_str":{"tool_mode":false,"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"list_add_label":"Add More","required":true,"placeholder":"","show":true,"name":"json_str","value":"","display_name":"JSON String","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The JSON string to be cleaned.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"normalize_unicode":{"tool_mode":false,"trace_as_metadata":true,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"normalize_unicode","value":false,"display_name":"Normalize Unicode","advanced":false,"dynamic":false,"info":"Normalize Unicode characters in the JSON string.","title_case":false,"type":"bool","_input_type":"BoolInput"},"remove_control_chars":{"tool_mode":false,"trace_as_metadata":true,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"remove_control_chars","value":false,"display_name":"Remove Control Characters","advanced":false,"dynamic":false,"info":"Remove control characters from the JSON string.","title_case":false,"type":"bool","_input_type":"BoolInput"},"validate_json":{"tool_mode":false,"trace_as_metadata":true,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"validate_json","value":false,"display_name":"Validate JSON","advanced":false,"dynamic":false,"info":"Validate the JSON string to ensure it is well-formed.","title_case":false,"type":"bool","_input_type":"BoolInput"}},"description":"将输出的JSON格式存在到文件中","icon":"save","base_classes":["Message"],"display_name":"Save to Files","documentation":"","minimized":false,"custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"output","hidden":null,"display_name":"Cleaned JSON String","method":"clean_json","value":"__UNDEFINED__","cache":true,"required_inputs":null,"allows_loop":false,"tool_mode":true}],"field_order":["json_str","remove_control_chars","normalize_unicode","validate_json"],"beta":false,"legacy":false,"edited":true,"metadata":{},"tool_mode":false,"lf_version":"1.2.0","official":false}},"id":"SaveToFile-V8l13","position":{"x":0,"y":0},"type":"genericNode"}],"viewport":{"x":1,"y":1,"zoom":1}},"description":"将输出的JSON格式存在到文件中","name":"Save to Files","id":"SaveToFile-V8l13","is_component":true,"last_tested_version":"1.2.0"}
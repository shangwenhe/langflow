{
  "id": "d3b5c582-cbfe-43c4-b8fa-362e076ba3cf",
  "tags": null,
  "locked": false,
  "gradient": null,
  "folder_id": "6248ca47-c58a-46ba-8b04-f50d5ca3721e",
  "is_component": false,
  "data": {
    "nodes": [
      {
        "data": {
          "description": "Define the agent's instructions, then enter a task to complete using tools.",
          "display_name": "Agent",
          "id": "Agent-NnRnc",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Define the agent's instructions, then enter a task to complete using tools.",
            "display_name": "Agent",
            "documentation": "",
            "edited": false,
            "field_order": [
              "agent_llm",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "output_schema",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "output_parser",
              "system_prompt",
              "tools",
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "agent_description",
              "memory",
              "sender",
              "sender_name",
              "n_messages",
              "session_id",
              "order",
              "template",
              "add_current_date_tool"
            ],
            "frozen": false,
            "icon": "bot",
            "legacy": false,
            "lf_version": "1.1.1",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "response",
                "hidden": null,
                "display_name": "Response",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "add_current_date_tool": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Current Date",
                "dynamic": false,
                "info": "If true, will add a tool to the agent that returns the current date.",
                "list": false,
                "name": "add_current_date_tool",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true,
                "input_types": []
              },
              "agent_description": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "display_name": "Agent Description [Deprecated]",
                "dynamic": false,
                "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "agent_description",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "A helpful assistant with access to the following tools:"
              },
              "agent_llm": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "display_name": "Model Provider",
                "dynamic": false,
                "info": "The provider of the language model that the agent will use to generate responses.",
                "input_types": [],
                "name": "agent_llm",
                "options": [
                  "Amazon Bedrock",
                  "Anthropic",
                  "Azure OpenAI",
                  "Deepseek",
                  "Google Generative AI",
                  "Groq",
                  "NVIDIA",
                  "OpenAI",
                  "SambaNova",
                  "Custom"
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Deepseek"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.custom_component.component import _get_component_toolkit\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.field_typing import Tool\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n\n    async def to_toolkit(self) -> list[Tool]:\n        component_toolkit = _get_component_toolkit()\n        tools_names = self._build_tools_names()\n        agent_description = self.get_tool_description()\n        # TODO: Agent Description Depreciated Feature to be removed\n        description = f\"{agent_description}{tools_names}\"\n        tools = component_toolkit(component=self).get_tools(\n            tool_name=self.get_tool_name(), tool_description=description, callbacks=self.get_langchain_callbacks()\n        )\n        if hasattr(self, \"tools_metadata\"):\n            tools = component_toolkit(component=self, metadata=self.tools_metadata).update_tools_metadata(tools=tools)\n        return tools\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": []
              },
              "handle_parsing_errors": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Handle Parse Errors",
                "dynamic": false,
                "info": "Should the Agent fix errors when reading user input for better processing?",
                "list": false,
                "name": "handle_parsing_errors",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true,
                "input_types": []
              },
              "input_value": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "The input provided by the user for the agent to process.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "max_iterations": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Iterations",
                "dynamic": false,
                "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                "list": false,
                "name": "max_iterations",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 15,
                "input_types": []
              },
              "memory": {
                "_input_type": "HandleInput",
                "advanced": true,
                "display_name": "External Memory",
                "dynamic": false,
                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                "input_types": [
                  "Memory"
                ],
                "list": false,
                "name": "memory",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "n_messages": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Messages",
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "list": false,
                "name": "n_messages",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 100,
                "input_types": []
              },
              "order": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "display_name": "Order",
                "dynamic": false,
                "info": "Order of the messages.",
                "name": "order",
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Ascending",
                "input_types": []
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Filter by sender type.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine and User",
                "input_types": []
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Filter by sender name.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "system_prompt": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "display_name": "Agent Instructions",
                "dynamic": false,
                "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "system_prompt",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "You are a helpful assistant that can use tools to answer questions and perform tasks.\nUse markdown to format your answer, properly embedding images and urls."
              },
              "template": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "display_name": "Template",
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{sender_name}: {text}"
              },
              "tools": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Tools",
                "dynamic": false,
                "info": "These are the tools that the agent can use to help with tasks.",
                "input_types": [
                  "Tool"
                ],
                "list": true,
                "name": "tools",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "verbose": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Verbose",
                "dynamic": false,
                "info": "",
                "list": false,
                "name": "verbose",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true,
                "input_types": []
              },
              "max_tokens": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "Maximum number of tokens to generate. Set to 0 for unlimited.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "input_types": []
              },
              "model_kwargs": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput",
                "input_types": []
              },
              "json_mode": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "json_mode",
                "value": false,
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "input_types": []
              },
              "model_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "deepseek-chat",
                  "deepseek-reasoner"
                ],
                "options_metadata": [],
                "combobox": true,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "deepseek-chat",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                "real_time_refresh": false,
                "refresh_button": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "input_types": []
              },
              "api_base": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_base",
                "value": "https://api.deepseek.com",
                "display_name": "DeepSeek API Base",
                "advanced": true,
                "dynamic": false,
                "info": "Base URL for API requests. Defaults to https://api.deepseek.com",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput",
                "input_types": []
              },
              "api_key": {
                "load_from_db": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "DeepSeek API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The DeepSeek API Key",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "temperature": {
                "tool_mode": false,
                "min_label": "",
                "max_label": "",
                "min_label_icon": "",
                "max_label_icon": "",
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 2,
                  "step": 0.01
                },
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 1,
                "display_name": "Temperature",
                "advanced": true,
                "dynamic": false,
                "info": "Controls randomness in responses",
                "title_case": false,
                "type": "slider",
                "_input_type": "SliderInput",
                "input_types": []
              },
              "seed": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "seed",
                "value": 1,
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "input_types": []
              }
            },
            "tool_mode": false
          },
          "type": "Agent"
        },
        "dragging": false,
        "id": "Agent-NnRnc",
        "measured": {
          "height": 621,
          "width": 320
        },
        "position": {
          "x": 1652.2479633316434,
          "y": 297.9085084144251
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ChatInput-teK4Q",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get chat inputs from the Playground.",
            "display_name": "Chat Input",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.1.1",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "files": {
                "_input_type": "FileInput",
                "advanced": true,
                "display_name": "Files",
                "dynamic": false,
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "file_path": "",
                "info": "Files to be sent with the message.",
                "list": true,
                "name": "files",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as input.",
                "input_types": [],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "type": "ChatInput"
        },
        "dragging": false,
        "id": "ChatInput-teK4Q",
        "measured": {
          "height": 229,
          "width": 320
        },
        "position": {
          "x": 1241.9566260691947,
          "y": 930.7462715570136
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Display a chat message in the Playground.",
          "display_name": "Chat Output",
          "id": "ChatOutput-zq5Xg",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.1.1",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Basic Clean Data",
                "dynamic": false,
                "info": "Whether to clean the data",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n                return (\n                    data.replace(r\"\\|\", r\"\\\\|\", regex=True)\n                    .applymap(lambda x: (str(x).replace(\"\\n\", \"<br/>\") if isinstance(x, str) else x))\n                    .to_markdown(index=False)\n                )\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return self._safe_convert(self.input_value)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "type": "ChatOutput"
        },
        "id": "ChatOutput-zq5Xg",
        "measured": {
          "height": 229,
          "width": 320
        },
        "position": {
          "x": 2029.726227044409,
          "y": 521.9624030396819
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Load and retrive data from specified URLs.",
          "display_name": "URL",
          "id": "URL-GQXse",
          "node": {
            "template": {
              "_type": "Component",
              "align-center": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "align-center",
                "value": true,
                "display_name": "是否居中显示",
                "advanced": false,
                "dynamic": false,
                "info": "对话框是否居中显示。",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "before-close": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "before-close",
                "value": "",
                "display_name": "关闭前事件",
                "advanced": false,
                "dynamic": false,
                "info": "对话框关闭前触发。",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "before-open": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "before-open",
                "value": "",
                "display_name": "打开前事件",
                "advanced": false,
                "dynamic": false,
                "info": "对话框打开前触发。",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "body-class": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "body-class",
                "display_name": "内容部分类名",
                "advanced": false,
                "dynamic": false,
                "info": "对话框内容部分的类名。",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "body-style": {
                "tool_mode": true,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "body-style",
                "display_name": "内容部分样式",
                "advanced": false,
                "dynamic": false,
                "info": "对话框内容部分的样式。",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "cancel": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "cancel",
                "value": "",
                "display_name": "取消事件",
                "advanced": false,
                "dynamic": false,
                "info": "点击取消、关闭按钮时触发。",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "cancel-button-props": {
                "tool_mode": true,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "cancel-button-props",
                "display_name": "取消按钮属性",
                "advanced": false,
                "dynamic": false,
                "info": "取消按钮的Props。",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "cancel-text": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "cancel-text",
                "display_name": "取消按钮文本",
                "advanced": false,
                "dynamic": false,
                "info": "取消按钮的内容。",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "closable": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "closable",
                "value": true,
                "display_name": "显示关闭按钮",
                "advanced": false,
                "dynamic": false,
                "info": "是否显示关闭按钮。",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "close": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "close",
                "value": "",
                "display_name": "关闭事件",
                "advanced": false,
                "dynamic": false,
                "info": "对话框关闭后（动画结束）触发。",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.io import (\n    HandleInput,\n    DataInput,\n    StrInput,\n    MessageInput,\n    MessageTextInput,\n    MultilineInput,\n    SecretStrInput,\n    IntInput,\n    FloatInput,\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FileInput,\n    Output\n)\nfrom langflow.schema.message import Message\n\n\nclass ModalComponent(Component):\n    display_name = \"模态框组件\"\n    description = \"Langflow的自定义模态框组件。\"\n    icon = \"modal\"\n    name = \"ModalComponent\"\n\n    # 定义组件的输入，包含 Props、Events 和 Slots\n    inputs = [\n        # Props 输入\n        BoolInput(\n            name=\"visible\",\n            display_name=\"是否可见 (v-model)\",\n            info=\"对话框是否可见。\",\n            value=False,\n            tool_mode=True\n        ),\n        BoolInput(\n            name=\"default-visible\",\n            display_name=\"默认是否可见\",\n            info=\"对话框默认是否可见（非受控状态）。\",\n            value=False,\n            tool_mode=True\n        ),\n        StrInput(\n            name=\"width\",\n            display_name=\"宽度\",\n            info=\"对话框的宽度，不设置的情况下会使用样式中的宽度值。\",\n            value=None,\n            tool_mode=True\n        ),\n        StrInput(\n            name=\"top\",\n            display_name=\"顶部距离\",\n            info=\"对话框距离顶部的高度，居中显示开启的情况下不生效。\",\n            value=None,\n            tool_mode=True\n        ),\n        BoolInput(\n            name=\"mask\",\n            display_name=\"是否显示遮罩层\",\n            info=\"是否显示遮罩层。\",\n            value=True,\n            tool_mode=True\n        ),\n        StrInput(\n            name=\"title\",\n            display_name=\"标题\",\n            info=\"对话框的标题。\",\n            value=None,\n            tool_mode=True\n        ),\n        DropdownInput(\n            name=\"title-align\",\n            display_name=\"标题对齐方式\",\n            info=\"标题的水平对齐方向。\",\n            options=[\"start\", \"center\"],\n            value=\"center\",\n            tool_mode=True\n        ),\n        BoolInput(\n            name=\"align-center\",\n            display_name=\"是否居中显示\",\n            info=\"对话框是否居中显示。\",\n            value=True,\n            tool_mode=True\n        ),\n        BoolInput(\n            name=\"unmount-on-close\",\n            display_name=\"关闭时卸载节点\",\n            info=\"关闭时是否卸载节点。\",\n            value=False,\n            tool_mode=True\n        ),\n        BoolInput(\n            name=\"mask-closable\",\n            display_name=\"点击遮罩层可关闭\",\n            info=\"是否点击遮罩层可以关闭对话框。\",\n            value=True,\n            tool_mode=True\n        ),\n        BoolInput(\n            name=\"hide-cancel\",\n            display_name=\"隐藏取消按钮\",\n            info=\"是否隐藏取消按钮。\",\n            value=False,\n            tool_mode=True\n        ),\n        StrInput(\n            name=\"simple\",\n            display_name=\"简单模式\",\n            info=\"是否开启简单模式。\",\n            value=\"(props: any) => {  return props.notice;}\",\n            tool_mode=True\n        ),\n        BoolInput(\n            name=\"closable\",\n            display_name=\"显示关闭按钮\",\n            info=\"是否显示关闭按钮。\",\n            value=True,\n            tool_mode=True\n        ),\n        StrInput(\n            name=\"ok-text\",\n            display_name=\"确认按钮文本\",\n            info=\"确认按钮的内容。\",\n            value=None,\n            tool_mode=True\n        ),\n        StrInput(\n            name=\"cancel-text\",\n            display_name=\"取消按钮文本\",\n            info=\"取消按钮的内容。\",\n            value=None,\n            tool_mode=True\n        ),\n        BoolInput(\n            name=\"ok-loading\",\n            display_name=\"确认按钮加载中\",\n            info=\"确认按钮是否为加载中状态。\",\n            value=False,\n            tool_mode=True\n        ),\n        DictInput(\n            name=\"ok-button-props\",\n            display_name=\"确认按钮属性\",\n            info=\"确认按钮的Props。\",\n            value=None,\n            tool_mode=True\n        ),\n        DictInput(\n            name=\"cancel-button-props\",\n            display_name=\"取消按钮属性\",\n            info=\"取消按钮的Props。\",\n            value=None,\n            tool_mode=True\n        ),\n        BoolInput(\n            name=\"footer\",\n            display_name=\"显示页脚\",\n            info=\"是否展示页脚部分。\",\n            value=True,\n            tool_mode=True\n        ),\n        BoolInput(\n            name=\"render-to-body\",\n            display_name=\"挂载到body元素\",\n            info=\"对话框是否挂载在 `body` 元素下。\",\n            value=True,\n            tool_mode=True\n        ),\n        StrInput(\n            name=\"popup-container\",\n            display_name=\"弹出框挂载容器\",\n            info=\"弹出框的挂载容器。\",\n            value=\"body\",\n            tool_mode=True\n        ),\n        DictInput(\n            name=\"mask-style\",\n            display_name=\"遮罩层样式\",\n            info=\"蒙层的样式。\",\n            value=None,\n            tool_mode=True\n        ),\n        StrInput(\n            name=\"modal-class\",\n            display_name=\"对话框类名\",\n            info=\"对话框的类名。\",\n            value=None,\n            tool_mode=True\n        ),\n        DictInput(\n            name=\"modal-style\",\n            display_name=\"对话框样式\",\n            info=\"对话框的样式。\",\n            value=None,\n            tool_mode=True\n        ),\n        StrInput(\n            name=\"on-before-ok\",\n            display_name=\"确认前回调\",\n            info=\"触发 ok 事件前的回调函数。如果返回 false 则不会触发后续事件，也可使用 done 进行异步关闭。\",\n            value=None,\n            tool_mode=True\n        ),\n        StrInput(\n            name=\"on-before-cancel\",\n            display_name=\"取消前回调\",\n            info=\"触发 cancel 事件前的回调函数。如果返回 false 则不会触发后续事件。\",\n            value=None,\n            tool_mode=True\n        ),\n        BoolInput(\n            name=\"esc-to-close\",\n            display_name=\"ESC 键关闭\",\n            info=\"是否支持 ESC 键关闭对话框。\",\n            value=True,\n            tool_mode=True\n        ),\n        BoolInput(\n            name=\"draggable\",\n            display_name=\"是否可拖动\",\n            info=\"是否支持拖动。\",\n            value=False,\n            tool_mode=True\n        ),\n        BoolInput(\n            name=\"fullscreen\",\n            display_name=\"是否全屏\",\n            info=\"是否开启全屏。\",\n            value=False,\n            tool_mode=True\n        ),\n        StrInput(\n            name=\"mask-animation-name\",\n            display_name=\"遮罩层动画名称\",\n            info=\"遮罩层动画名字。\",\n            value=None,\n            tool_mode=True\n        ),\n        StrInput(\n            name=\"modal-animation-name\",\n            display_name=\"对话框动画名称\",\n            info=\"对话框动画名字。\",\n            value=None,\n            tool_mode=True\n        ),\n        StrInput(\n            name=\"body-class\",\n            display_name=\"内容部分类名\",\n            info=\"对话框内容部分的类名。\",\n            value=None,\n            tool_mode=True\n        ),\n        DictInput(\n            name=\"body-style\",\n            display_name=\"内容部分样式\",\n            info=\"对话框内容部分的样式。\",\n            value=None,\n            tool_mode=True\n        ),\n        BoolInput(\n            name=\"hide-title\",\n            display_name=\"隐藏标题\",\n            info=\"是否隐藏标题。\",\n            value=False,\n            tool_mode=True\n        ),\n\n        # Event\n        StrInput(\n            name=\"ok\",\n            display_name=\"确认事件\",\n            info=\"点击确定按钮时触发。\",\n            value=\"\",\n            tool_mode=True\n        ),\n        StrInput(\n            name=\"cancel\",\n            display_name=\"取消事件\",\n            info=\"点击取消、关闭按钮时触发。\",\n            value=\"\",\n            tool_mode=True\n        ),\n        StrInput(\n            name=\"open\",\n            display_name=\"打开事件\",\n            info=\"对话框打开后（动画结束）触发。\",\n            value=\"\",\n            tool_mode=True\n        ),\n        StrInput(\n            name=\"close\",\n            display_name=\"关闭事件\",\n            info=\"对话框关闭后（动画结束）触发。\",\n            value=\"\",\n            tool_mode=True\n        ),\n        StrInput(\n            name=\"before-open\",\n            display_name=\"打开前事件\",\n            info=\"对话框打开前触发。\",\n            value=\"\",\n            tool_mode=True\n        ),\n        StrInput(\n            name=\"before-close\",\n            display_name=\"关闭前事件\",\n            info=\"对话框关闭前触发。\",\n            value=\"\",\n            tool_mode=True\n        ),\n\n        # 内嵌子模块\n        MultilineInput(\n            name=\"title_slot\",\n            display_name=\"标题插槽\",\n            info=\"标题插槽的内容。\",\n            tool_mode=True\n        ),\n        MultilineInput(\n            name=\"footer_slot\",\n            display_name=\"页脚插槽\",\n            info=\"页脚插槽的内容。\",\n            tool_mode=True\n        )\n    ]\n\n    # 定义组件的输出\n    outputs = [\n        Output(display_name=\"消息\", name=\"output\", method=\"build_output\"),\n    ]\n\n    def build_output(self) -> Message:\n        # Props\n        visible_prop = f'''v-model:visible=\"{self.visible}\"''' if self.visible else ''\n        default_visible_prop = f'''default-visible=\"{self['default-visible']}\"''' if self['default-visible'] else ''\n        width_prop = f'''width=\"{self.width}\"''' if self.width else ''\n        top_prop = f'''top=\"{self.top}\"''' if self.top else ''\n        mask_prop = f'''mask=\"{self.mask}\"''' if self.mask else ''\n        title_prop = f'''title=\"{self.title}\"''' if self.title else ''\n        title_align_prop = f'''title-align=\"{self['title-align']}\"''' if self['title-align'] else ''\n        align_center_prop = f'''align-center=\"{self['align-center']}\"''' if self['align-center'] else ''\n        unmount_on_close_prop = f'''unmount-on-close=\"{self['unmount-on-close']}\"''' if self['unmount-on-close'] else ''\n        mask_closable_prop = f'''mask-closable=\"{self['mask-closable']}\"''' if self['mask-closable'] else ''\n        hide_cancel_prop = f'''hide-cancel=\"{self['hide-cancel']}\"''' if self['hide-cancel'] else ''\n        simple_prop = f'''simple=\"{self.simple}\"''' if self.simple else ''\n        closable_prop = f'''closable=\"{self.closable}\"''' if self.closable else ''\n        ok_text_prop = f'''ok-text=\"{self['ok-text']}\"''' if self['ok-text'] else ''\n        cancel_text_prop = f'''cancel-text=\"{self['cancel-text']}\"''' if self['cancel-text'] else ''\n        ok_loading_prop = f'''ok-loading=\"{self['ok-loading']}\"''' if self['ok-loading'] else ''\n        ok_button_props_prop = f'''ok-button-props=\"{self['ok-button-props']}\"''' if self['ok-button-props'] else ''\n        cancel_button_props_prop = f'''cancel-button-props=\"{self['cancel-button-props']}\"''' if self['cancel-button-props'] else ''\n        footer_prop = f'''footer=\"{self.footer}\"''' if self.footer else ''\n        render_to_body_prop = f'''render-to-body=\"{self['render-to-body']}\"''' if self['render-to-body'] else ''\n        popup_container_prop = f'''popup-container=\"{self['popup-container']}\"''' if self['popup-container'] else ''\n        mask_style_prop = f'''mask-style=\"{self['mask-style']}\"''' if self['mask-style'] else ''\n        modal_class_prop = f'''modal-class=\"{self['modal-class']}\"''' if self['modal-class'] else ''\n        modal_style_prop = f'''modal-style=\"{self['modal-style']}\"''' if self['modal-style'] else ''\n        on_before_ok_prop = f'''on-before-ok=\"{self['on-before-ok']}\"''' if self['on-before-ok'] else ''\n        on_before_cancel_prop = f'''on-before-cancel=\"{self['on-before-cancel']}\"''' if self['on-before-cancel'] else ''\n        esc_to_close_prop = f'''esc-to-close=\"{self['esc-to-close']}\"''' if self['esc-to-close'] else ''\n        draggable_prop = f'''draggable=\"{self.draggable}\"''' if self.draggable else ''\n        fullscreen_prop = f'''fullscreen=\"{self.fullscreen}\"''' if self.fullscreen else ''\n        mask_animation_name_prop = f'''mask-animation-name=\"{self['mask-animation-name']}\"''' if self['mask-animation-name'] else ''\n        modal_animation_name_prop = f'''modal-animation-name=\"{self['modal-animation-name']}\"''' if self['modal-animation-name'] else ''\n        body_class_prop = f'''body-class=\"{self['body-class']}\"''' if self['body-class'] else ''\n        body_style_prop = f'''body-style=\"{self['body-style']}\"''' if self['body-style'] else ''\n        hide_title_prop = f'''hide-title=\"{self['hide-title']}\"''' if self['hide-title'] else ''\n\n        # Event\n        ok_event = f'''@ok=\"{self.ok}\"''' if self.ok else ''\n        cancel_event = f'''@cancel=\"{self.cancel}\"''' if self.cancel else ''\n        open_event = f'''@open=\"{self.open}\"''' if self.open else ''\n        close_event = f'''@close=\"{self.close}\"''' if self.close else ''\n        before_open_event = f'''@before-open=\"{self['before-open']}\"''' if self['before-open'] else ''\n        before_close_event = f'''@before-close=\"{self['before-close']}\"''' if self['before-close'] else ''\n\n        # 嵌套子模块\n        title_slot = f'''<template #title>{self.title_slot}</template>''' if self.title_slot else ''\n        footer_slot = f'''<template #footer>{self.footer_slot}</template>''' if self.footer_slot else ''\n\n        # 去除多余空格\n        props_and_events = \" \".join(filter(None, [\n            visible_prop, default_visible_prop, width_prop, top_prop, mask_prop, title_prop, title_align_prop,\n            align_center_prop, unmount_on_close_prop, mask_closable_prop, hide_cancel_prop, simple_prop,\n            closable_prop, ok_text_prop, cancel_text_prop, ok_loading_prop, ok_button_props_prop,\n            cancel_button_props_prop, footer_prop, render_to_body_prop, popup_container_prop, mask_style_prop,\n            modal_class_prop, modal_style_prop, on_before_ok_prop, on_before_cancel_prop, esc_to_close_prop,\n            draggable_prop, fullscreen_prop, mask_animation_name_prop, modal_animation_name_prop, body_class_prop,\n            body_style_prop, hide_title_prop, ok_event, cancel_event, open_event, close_event, before_open_event,\n            before_close_event\n        ]))\n        result = f\"<a-modal {props_and_events}> {title_slot} {footer_slot} </a-modal>\"\n\n        return Message(\n            text=result,\n        )",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "default-visible": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "default-visible",
                "value": false,
                "display_name": "默认是否可见",
                "advanced": false,
                "dynamic": false,
                "info": "对话框默认是否可见（非受控状态）。",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "draggable": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "draggable",
                "value": false,
                "display_name": "是否可拖动",
                "advanced": false,
                "dynamic": false,
                "info": "是否支持拖动。",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "esc-to-close": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "esc-to-close",
                "value": true,
                "display_name": "ESC 键关闭",
                "advanced": false,
                "dynamic": false,
                "info": "是否支持 ESC 键关闭对话框。",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "footer": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "footer",
                "value": true,
                "display_name": "显示页脚",
                "advanced": false,
                "dynamic": false,
                "info": "是否展示页脚部分。",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "footer_slot": {
                "tool_mode": true,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "footer_slot",
                "value": "",
                "display_name": "页脚插槽",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "页脚插槽的内容。",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "fullscreen": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "fullscreen",
                "value": false,
                "display_name": "是否全屏",
                "advanced": false,
                "dynamic": false,
                "info": "是否开启全屏。",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "hide-cancel": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "hide-cancel",
                "value": false,
                "display_name": "隐藏取消按钮",
                "advanced": false,
                "dynamic": false,
                "info": "是否隐藏取消按钮。",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "hide-title": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "hide-title",
                "value": false,
                "display_name": "隐藏标题",
                "advanced": false,
                "dynamic": false,
                "info": "是否隐藏标题。",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "mask": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "mask",
                "value": true,
                "display_name": "是否显示遮罩层",
                "advanced": false,
                "dynamic": false,
                "info": "是否显示遮罩层。",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "mask-animation-name": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "mask-animation-name",
                "display_name": "遮罩层动画名称",
                "advanced": false,
                "dynamic": false,
                "info": "遮罩层动画名字。",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "mask-closable": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "mask-closable",
                "value": true,
                "display_name": "点击遮罩层可关闭",
                "advanced": false,
                "dynamic": false,
                "info": "是否点击遮罩层可以关闭对话框。",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "mask-style": {
                "tool_mode": true,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "mask-style",
                "display_name": "遮罩层样式",
                "advanced": false,
                "dynamic": false,
                "info": "蒙层的样式。",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "modal-animation-name": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "modal-animation-name",
                "display_name": "对话框动画名称",
                "advanced": false,
                "dynamic": false,
                "info": "对话框动画名字。",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "modal-class": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "modal-class",
                "display_name": "对话框类名",
                "advanced": false,
                "dynamic": false,
                "info": "对话框的类名。",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "modal-style": {
                "tool_mode": true,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "modal-style",
                "display_name": "对话框样式",
                "advanced": false,
                "dynamic": false,
                "info": "对话框的样式。",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "ok": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ok",
                "value": "",
                "display_name": "确认事件",
                "advanced": false,
                "dynamic": false,
                "info": "点击确定按钮时触发。",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "ok-button-props": {
                "tool_mode": true,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ok-button-props",
                "display_name": "确认按钮属性",
                "advanced": false,
                "dynamic": false,
                "info": "确认按钮的Props。",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "ok-loading": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ok-loading",
                "value": false,
                "display_name": "确认按钮加载中",
                "advanced": false,
                "dynamic": false,
                "info": "确认按钮是否为加载中状态。",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "ok-text": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ok-text",
                "display_name": "确认按钮文本",
                "advanced": false,
                "dynamic": false,
                "info": "确认按钮的内容。",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "on-before-cancel": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "on-before-cancel",
                "display_name": "取消前回调",
                "advanced": false,
                "dynamic": false,
                "info": "触发 cancel 事件前的回调函数。如果返回 false 则不会触发后续事件。",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "on-before-ok": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "on-before-ok",
                "display_name": "确认前回调",
                "advanced": false,
                "dynamic": false,
                "info": "触发 ok 事件前的回调函数。如果返回 false 则不会触发后续事件，也可使用 done 进行异步关闭。",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "open": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "open",
                "value": "",
                "display_name": "打开事件",
                "advanced": false,
                "dynamic": false,
                "info": "对话框打开后（动画结束）触发。",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "popup-container": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "popup-container",
                "value": "",
                "display_name": "弹出框挂载容器",
                "advanced": false,
                "dynamic": false,
                "info": "弹出框的挂载容器。",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "render-to-body": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "render-to-body",
                "value": true,
                "display_name": "挂载到body元素",
                "advanced": false,
                "dynamic": false,
                "info": "对话框是否挂载在 `body` 元素下。",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "simple": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "simple",
                "value": "",
                "display_name": "简单模式",
                "advanced": false,
                "dynamic": false,
                "info": "是否开启简单模式。",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "title": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "title",
                "display_name": "标题",
                "advanced": false,
                "dynamic": false,
                "info": "对话框的标题。",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "title-align": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "options": [
                  "start",
                  "center"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "title-align",
                "value": "",
                "display_name": "标题对齐方式",
                "advanced": false,
                "dynamic": false,
                "info": "标题的水平对齐方向。",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "title_slot": {
                "tool_mode": true,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "title_slot",
                "value": "",
                "display_name": "标题插槽",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "标题插槽的内容。",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "top": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "top",
                "display_name": "顶部距离",
                "advanced": false,
                "dynamic": false,
                "info": "对话框距离顶部的高度，居中显示开启的情况下不生效。",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "unmount-on-close": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "unmount-on-close",
                "value": false,
                "display_name": "关闭时卸载节点",
                "advanced": false,
                "dynamic": false,
                "info": "关闭时是否卸载节点。",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "visible": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "visible",
                "value": false,
                "display_name": "是否可见 (v-model)",
                "advanced": false,
                "dynamic": false,
                "info": "对话框是否可见。",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "width": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "width",
                "display_name": "宽度",
                "advanced": false,
                "dynamic": false,
                "info": "对话框的宽度，不设置的情况下会使用样式中的宽度值。",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "tools_metadata": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "name",
                      "display_name": "Tool Name",
                      "sortable": false,
                      "filterable": false,
                      "formatter": "text",
                      "type": "str",
                      "description": "Specify the name of the tool.",
                      "default": "None",
                      "disable_edit": false,
                      "edit_mode": "inline",
                      "hidden": false
                    },
                    {
                      "name": "description",
                      "display_name": "Tool Description",
                      "sortable": false,
                      "filterable": false,
                      "formatter": "text",
                      "type": "str",
                      "description": "Describe the purpose of the tool.",
                      "default": "None",
                      "disable_edit": false,
                      "edit_mode": "popover",
                      "hidden": false
                    },
                    {
                      "name": "tags",
                      "display_name": "Tool Identifiers",
                      "sortable": false,
                      "filterable": false,
                      "formatter": "text",
                      "type": "str",
                      "description": "The default identifiers for the tools and cannot be changed.",
                      "default": "None",
                      "disable_edit": true,
                      "edit_mode": "inline",
                      "hidden": true
                    }
                  ]
                },
                "trigger_text": "",
                "trigger_icon": "Hammer",
                "table_icon": "Hammer",
                "table_options": {
                  "block_add": true,
                  "block_delete": true,
                  "block_edit": true,
                  "block_sort": true,
                  "block_filter": true,
                  "block_hide": true,
                  "block_select": true,
                  "hide_options": true,
                  "field_parsers": {
                    "name": [
                      "snake_case",
                      "no_blank"
                    ],
                    "commands": "commands"
                  },
                  "description": "Modify tool names and descriptions to help agents understand when to use each tool."
                },
                "trace_as_metadata": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tools_metadata",
                "value": [
                  {
                    "name": "ModalComponent-build_output",
                    "description": "build_output() - Langflow的自定义模态框组件。",
                    "tags": [
                      "ModalComponent-build_output"
                    ]
                  }
                ],
                "display_name": "Edit tools",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "real_time_refresh": true,
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput"
              }
            },
            "description": "Langflow的自定义模态框组件。",
            "icon": "modal",
            "base_classes": [
              "Message"
            ],
            "display_name": "模态框组件",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "component_as_tool",
                "hidden": null,
                "display_name": "Toolset",
                "method": "to_toolkit",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "visible",
              "default-visible",
              "width",
              "top",
              "mask",
              "title",
              "title-align",
              "align-center",
              "unmount-on-close",
              "mask-closable",
              "hide-cancel",
              "simple",
              "closable",
              "ok-text",
              "cancel-text",
              "ok-loading",
              "ok-button-props",
              "cancel-button-props",
              "footer",
              "render-to-body",
              "popup-container",
              "mask-style",
              "modal-class",
              "modal-style",
              "on-before-ok",
              "on-before-cancel",
              "esc-to-close",
              "draggable",
              "fullscreen",
              "mask-animation-name",
              "modal-animation-name",
              "body-class",
              "body-style",
              "hide-title",
              "ok",
              "cancel",
              "open",
              "close",
              "before-open",
              "before-close",
              "title_slot",
              "footer_slot"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": true
          },
          "type": "ModalComponent"
        },
        "dragging": false,
        "id": "URL-GQXse",
        "measured": {
          "height": 3075,
          "width": 320
        },
        "position": {
          "x": -119.81045517938674,
          "y": -187.39494824636137
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "note-j2d3A",
          "node": {
            "description": "### 💡 Add your OpenAI API key here👇",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "transparent"
            }
          },
          "type": "note"
        },
        "id": "note-j2d3A",
        "measured": {
          "height": 324,
          "width": 324
        },
        "position": {
          "x": 1648.6876745095624,
          "y": 253.8646618156497
        },
        "selected": false,
        "type": "noteNode"
      },
      {
        "data": {
          "id": "CalculatorComponent-NSK57",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "category": "tools",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Perform basic arithmetic operations on a given expression.",
            "display_name": "Calculator",
            "documentation": "",
            "edited": false,
            "field_order": [
              "expression"
            ],
            "frozen": false,
            "icon": "calculator",
            "key": "CalculatorComponent",
            "legacy": false,
            "lf_version": "1.1.1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "component_as_tool",
                "hidden": null,
                "display_name": "Toolset",
                "method": "to_toolkit",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "pinned": false,
            "score": 0.001,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import ast\nimport operator\nfrom collections.abc import Callable\n\nfrom langflow.custom import Component\nfrom langflow.inputs import MessageTextInput\nfrom langflow.io import Output\nfrom langflow.schema import Data\n\n\nclass CalculatorComponent(Component):\n    display_name = \"Calculator\"\n    description = \"Perform basic arithmetic operations on a given expression.\"\n    icon = \"calculator\"\n\n    # Cache operators dictionary as a class variable\n    OPERATORS: dict[type[ast.operator], Callable] = {\n        ast.Add: operator.add,\n        ast.Sub: operator.sub,\n        ast.Mult: operator.mul,\n        ast.Div: operator.truediv,\n        ast.Pow: operator.pow,\n    }\n\n    inputs = [\n        MessageTextInput(\n            name=\"expression\",\n            display_name=\"Expression\",\n            info=\"The arithmetic expression to evaluate (e.g., '4*4*(33/22)+12-20').\",\n            tool_mode=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"result\", type_=Data, method=\"evaluate_expression\"),\n    ]\n\n    def _eval_expr(self, node: ast.AST) -> float:\n        \"\"\"Evaluate an AST node recursively.\"\"\"\n        if isinstance(node, ast.Constant):\n            if isinstance(node.value, int | float):\n                return float(node.value)\n            error_msg = f\"Unsupported constant type: {type(node.value).__name__}\"\n            raise TypeError(error_msg)\n        if isinstance(node, ast.Num):  # For backwards compatibility\n            if isinstance(node.n, int | float):\n                return float(node.n)\n            error_msg = f\"Unsupported number type: {type(node.n).__name__}\"\n            raise TypeError(error_msg)\n\n        if isinstance(node, ast.BinOp):\n            op_type = type(node.op)\n            if op_type not in self.OPERATORS:\n                error_msg = f\"Unsupported binary operator: {op_type.__name__}\"\n                raise TypeError(error_msg)\n\n            left = self._eval_expr(node.left)\n            right = self._eval_expr(node.right)\n            return self.OPERATORS[op_type](left, right)\n\n        error_msg = f\"Unsupported operation or expression type: {type(node).__name__}\"\n        raise TypeError(error_msg)\n\n    def evaluate_expression(self) -> Data:\n        \"\"\"Evaluate the mathematical expression and return the result.\"\"\"\n        try:\n            tree = ast.parse(self.expression, mode=\"eval\")\n            result = self._eval_expr(tree.body)\n\n            formatted_result = f\"{float(result):.6f}\".rstrip(\"0\").rstrip(\".\")\n            self.log(f\"Calculation result: {formatted_result}\")\n\n            self.status = formatted_result\n            return Data(data={\"result\": formatted_result})\n\n        except ZeroDivisionError:\n            error_message = \"Error: Division by zero\"\n            self.status = error_message\n            return Data(data={\"error\": error_message, \"input\": self.expression})\n\n        except (SyntaxError, TypeError, KeyError, ValueError, AttributeError, OverflowError) as e:\n            error_message = f\"Invalid expression: {e!s}\"\n            self.status = error_message\n            return Data(data={\"error\": error_message, \"input\": self.expression})\n\n    def build(self):\n        \"\"\"Return the main evaluation function.\"\"\"\n        return self.evaluate_expression\n"
              },
              "expression": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Expression",
                "dynamic": false,
                "info": "The arithmetic expression to evaluate (e.g., '4*4*(33/22)+12-20').",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "expression",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "tools_metadata": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "name",
                      "display_name": "Tool Name",
                      "sortable": false,
                      "filterable": false,
                      "formatter": "text",
                      "type": "str",
                      "description": "Specify the name of the tool.",
                      "default": "None",
                      "disable_edit": false,
                      "edit_mode": "inline",
                      "hidden": false
                    },
                    {
                      "name": "description",
                      "display_name": "Tool Description",
                      "sortable": false,
                      "filterable": false,
                      "formatter": "text",
                      "type": "str",
                      "description": "Describe the purpose of the tool.",
                      "default": "None",
                      "disable_edit": false,
                      "edit_mode": "popover",
                      "hidden": false
                    },
                    {
                      "name": "tags",
                      "display_name": "Tool Identifiers",
                      "sortable": false,
                      "filterable": false,
                      "formatter": "text",
                      "type": "str",
                      "description": "The default identifiers for the tools and cannot be changed.",
                      "default": "None",
                      "disable_edit": true,
                      "edit_mode": "inline",
                      "hidden": true
                    }
                  ]
                },
                "trigger_text": "",
                "trigger_icon": "Hammer",
                "table_icon": "Hammer",
                "table_options": {
                  "block_add": true,
                  "block_delete": true,
                  "block_edit": true,
                  "block_sort": true,
                  "block_filter": true,
                  "block_hide": true,
                  "block_select": true,
                  "hide_options": true,
                  "field_parsers": {
                    "name": [
                      "snake_case",
                      "no_blank"
                    ],
                    "commands": "commands"
                  },
                  "description": "Modify tool names and descriptions to help agents understand when to use each tool."
                },
                "trace_as_metadata": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tools_metadata",
                "value": [
                  {
                    "description": "evaluate_expression() - Perform basic arithmetic operations on a given expression.",
                    "name": "None-evaluate_expression",
                    "tags": [
                      "None-evaluate_expression"
                    ]
                  }
                ],
                "display_name": "Edit tools",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "real_time_refresh": true,
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput"
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "CalculatorComponent"
        },
        "dragging": false,
        "id": "CalculatorComponent-NSK57",
        "measured": {
          "height": 333,
          "width": 320
        },
        "position": {
          "x": 858.4831089403664,
          "y": 474.95289360194477
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "id": "CustomComponent-4cUCW",
        "type": "genericNode",
        "position": {
          "x": 2497.4209200861824,
          "y": 18.994447729114462
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output, DropdownInput\nfrom langflow.schema import Data\nfrom datetime import datetime\n\n\nclass CalendarComponent(Component):\n    display_name = \"Calendar Component\"\n    description = \"A custom calendar component for Langflow.\"\n    documentation: str = \"https://docs.langflow.org/components-custom-components\"\n    icon = \"calendar\"\n    name = \"CalendarComponent\"\n\n    # 定义组件的输入，包含 Props、Events 和 Slots\n    inputs = [\n        # Props 输入\n        MessageTextInput(\n            name=\"model_value\",\n            display_name=\"Model Value (v-model)\",\n            info=\"The bound value of the calendar\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"default_value\",\n            display_name=\"Default Value\",\n            info=\"The default value of the calendar (uncontrolled state)\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        DropdownInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            info=\"The mode of the calendar, can be 'month' or 'year'\",\n            options=[\"month\", \"year\"],\n            value=\"\"\n        ),\n        DropdownInput(\n            name=\"default_mode\",\n            display_name=\"Default Mode\",\n            info=\"The default mode of the calendar, default is 'month'\",\n            options=[\"month\", \"year\"],\n            value=\"month\"\n        ),\n        MessageTextInput(\n            name=\"modes\",\n            display_name=\"Display Modes\",\n            info=\"The display modes of the calendar, default is ['month', 'year']\",\n            value=\"['month', 'year']\",\n            tool_mode=True,\n        ),\n        # Events 输入\n        MessageTextInput(\n            name=\"events\",\n            display_name=\"Events\",\n            info=\"Events for the calendar, input as a string. e.g. 'change,panel-change'\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        # Slots 输入\n        MessageTextInput(\n            name=\"slots\",\n            display_name=\"Slots\",\n            info=\"Slots for the calendar, input as a string. e.g. 'header,default'\",\n            value=\"\",\n            tool_mode=True,\n        ),\n    ]\n\n    # 定义组件的输出\n    outputs = [\n        Output(display_name=\"Output\", name=\"output\", method=\"build_output\"),\n    ]\n\n    def build_output(self) -> Data:\n        # 获取输入的值\n        model_value = self.model_value\n        default_value = self.default_value\n        mode = self.mode\n        default_mode = self.default_mode\n        modes = self.modes\n        events = self.events\n        slots = self.slots\n\n        # 这里可以添加对输入值的处理逻辑，例如解析日期字符串、事件字符串和插槽字符串等\n        # 为了简单起见，我们直接将输入值封装成输出数据\n        output_data = {\n            \"model_value\": model_value,\n            \"default_value\": default_value,\n            \"mode\": mode,\n            \"default_mode\": default_mode,\n            \"modes\": modes,\n            \"events\": events,\n            \"slots\": slots,\n        }\n\n        data = Data(value=output_data)\n        self.status = data\n        return data",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "default_mode": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "month",
                  "year"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "default_mode",
                "value": "month",
                "display_name": "Default Mode",
                "advanced": false,
                "dynamic": false,
                "info": "The default mode of the calendar, default is 'month'",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "default_value": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "default_value",
                "value": "",
                "display_name": "Default Value",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The default value of the calendar (uncontrolled state)",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "events": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "events",
                "value": "",
                "display_name": "Events",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Events for the calendar, input as a string. e.g. 'change,panel-change'",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "mode": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "month",
                  "year"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "mode",
                "value": "",
                "display_name": "Mode",
                "advanced": false,
                "dynamic": false,
                "info": "The mode of the calendar, can be 'month' or 'year'",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "model_value": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_value",
                "value": "",
                "display_name": "Model Value (v-model)",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The bound value of the calendar",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "modes": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "modes",
                "value": "",
                "display_name": "Display Modes",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The display modes of the calendar, default is ['month', 'year']",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "slots": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "slots",
                "value": "",
                "display_name": "Slots",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Slots for the calendar, input as a string. e.g. 'header,default'",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "tools_metadata": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "name",
                      "display_name": "Tool Name",
                      "sortable": false,
                      "filterable": false,
                      "formatter": "text",
                      "type": "str",
                      "description": "Specify the name of the tool.",
                      "default": "None",
                      "disable_edit": false,
                      "edit_mode": "inline",
                      "hidden": false
                    },
                    {
                      "name": "description",
                      "display_name": "Tool Description",
                      "sortable": false,
                      "filterable": false,
                      "formatter": "text",
                      "type": "str",
                      "description": "Describe the purpose of the tool.",
                      "default": "None",
                      "disable_edit": false,
                      "edit_mode": "popover",
                      "hidden": false
                    },
                    {
                      "name": "tags",
                      "display_name": "Tool Identifiers",
                      "sortable": false,
                      "filterable": false,
                      "formatter": "text",
                      "type": "str",
                      "description": "The default identifiers for the tools and cannot be changed.",
                      "default": "None",
                      "disable_edit": true,
                      "edit_mode": "inline",
                      "hidden": true
                    }
                  ]
                },
                "trigger_text": "",
                "trigger_icon": "Hammer",
                "table_icon": "Hammer",
                "table_options": {
                  "block_add": true,
                  "block_delete": true,
                  "block_edit": true,
                  "block_sort": true,
                  "block_filter": true,
                  "block_hide": true,
                  "block_select": true,
                  "hide_options": true,
                  "field_parsers": {
                    "name": [
                      "snake_case",
                      "no_blank"
                    ],
                    "commands": "commands"
                  },
                  "description": "Modify tool names and descriptions to help agents understand when to use each tool."
                },
                "trace_as_metadata": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tools_metadata",
                "value": [
                  {
                    "name": "CalendarComponent-build_output",
                    "description": "build_output() - A custom calendar component for Langflow.",
                    "tags": [
                      "CalendarComponent-build_output"
                    ]
                  }
                ],
                "display_name": "Edit tools",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "real_time_refresh": true,
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput"
              }
            },
            "description": "A custom calendar component for Langflow.",
            "icon": "calendar",
            "base_classes": [
              "Data"
            ],
            "display_name": "Calendar Component",
            "documentation": "https://docs.langflow.org/components-custom-components",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "component_as_tool",
                "hidden": null,
                "display_name": "Toolset",
                "method": "to_toolkit",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "model_value",
              "default_value",
              "mode",
              "default_mode",
              "modes",
              "events",
              "slots"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": true
          },
          "showNode": true,
          "type": "CalendarComponent",
          "id": "CustomComponent-4cUCW"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 805
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-Krbbo",
        "type": "genericNode",
        "position": {
          "x": 494.0383981155144,
          "y": -82.76509310581518
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "autofocus": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "autofocus",
                "value": false,
                "display_name": "Autofocus",
                "advanced": false,
                "dynamic": false,
                "info": "Set the native 'autofocus' attribute of the button, refer to HTML standard.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.io import (\n    StrInput,\n    DropdownInput,\n    BoolInput,\n    Output\n)\nfrom langflow.schema import Data\n\n\nclass ButtonComponent(Component):\n    display_name = \"Button Component\"\n    description = \"A custom button component for Langflow.\"\n    documentation: str = \"https://docs.langflow.org/components-custom-components\"\n    icon = \"button\"\n    name = \"ButtonComponent\"\n\n    # 定义组件的输入，包含 Props、Events 和 Slots\n    inputs = [\n        # Props 输入\n        DropdownInput(\n            name=\"type\",\n            display_name=\"Button Type\",\n            info=\"The type of the button, including secondary, primary, dashed, outline, text.\",\n            options=[\"secondary\", \"primary\", \"dashed\", \"outline\", \"text\"],\n            value=\"secondary\"\n        ),\n        StrInput(\n            name=\"shape\",\n            display_name=\"Button Shape\",\n            info=\"The shape of the button.\",\n            value=\"\"\n        ),\n        DropdownInput(\n            name=\"status\",\n            display_name=\"Button Status\",\n            info=\"The status of the button, can be normal, warning, success, danger.\",\n            options=[\"normal\", \"warning\", \"success\", \"danger\"],\n            value=\"normal\"\n        ),\n        DropdownInput(\n            name=\"size\",\n            display_name=\"Button Size\",\n            info=\"The size of the button, can be mini, small, medium, large.\",\n            options=[\"mini\", \"small\", \"medium\", \"large\"],\n            value=\"medium\"\n        ),\n        BoolInput(\n            name=\"long\",\n            display_name=\"Adaptive Width\",\n            info=\"Whether the button width adapts to the container.\",\n            value=False\n        ),\n        BoolInput(\n            name=\"loading\",\n            display_name=\"Loading State\",\n            info=\"Whether the button is in the loading state.\",\n            value=False\n        ),\n        BoolInput(\n            name=\"disabled\",\n            display_name=\"Disabled State\",\n            info=\"Whether the button is disabled.\",\n            value=False\n        ),\n        StrInput(\n            name=\"html_type\",\n            display_name=\"HTML Type\",\n            info=\"Set the native 'type' attribute of the button, refer to HTML standard.\",\n            value=\"button\"\n        ),\n        BoolInput(\n            name=\"autofocus\",\n            display_name=\"Autofocus\",\n            info=\"Set the native 'autofocus' attribute of the button, refer to HTML standard.\",\n            value=False\n        ),\n        StrInput(\n            name=\"href\",\n            display_name=\"Link\",\n            info=\"Set the jump link. When this property is set, the button is rendered as an 'a' tag.\",\n            value=\"\"\n        ),\n        # Events 输入\n        StrInput(\n            name=\"events\",\n            display_name=\"Events\",\n            info=\"Events for the button, input as a string. e.g. 'click'\",\n            value=\"\"\n        ),\n        # Slots 输入\n        StrInput(\n            name=\"slots\",\n            display_name=\"Slots\",\n            info=\"Slots for the button, input as a string. e.g. 'icon'\",\n            value=\"\"\n        )\n    ]\n\n    # 定义组件的输出\n    outputs = [\n        Output(display_name=\"Output\", name=\"output\", method=\"build_output\"),\n    ]\n\n    def build_output(self) -> Data:\n        # 获取输入的值\n        button_type = self.type\n        shape = self.shape\n        status = self.status\n        size = self.size\n        long = self.long\n        loading = self.loading\n        disabled = self.disabled\n        html_type = self.html_type\n        autofocus = self.autofocus\n        href = self.href\n        events = self.events\n        slots = self.slots\n\n        # 封装输出数据\n        output_data = {\n            \"type\": button_type,\n            \"shape\": shape,\n            \"status\": status,\n            \"size\": size,\n            \"long\": long,\n            \"loading\": loading,\n            \"disabled\": disabled,\n            \"html_type\": html_type,\n            \"autofocus\": autofocus,\n            \"href\": href,\n            \"events\": events,\n            \"slots\": slots\n        }\n\n        data = Data(value=output_data)\n        self.status = data\n        return data\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "disabled": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "disabled",
                "value": false,
                "display_name": "Disabled State",
                "advanced": false,
                "dynamic": false,
                "info": "Whether the button is disabled.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "events": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "events",
                "value": "",
                "display_name": "Events",
                "advanced": false,
                "dynamic": false,
                "info": "Events for the button, input as a string. e.g. 'click'",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "href": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "href",
                "value": "",
                "display_name": "Link",
                "advanced": false,
                "dynamic": false,
                "info": "Set the jump link. When this property is set, the button is rendered as an 'a' tag.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "html_type": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "html_type",
                "value": "button",
                "display_name": "HTML Type",
                "advanced": false,
                "dynamic": false,
                "info": "Set the native 'type' attribute of the button, refer to HTML standard.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "loading": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "loading",
                "value": false,
                "display_name": "Loading State",
                "advanced": false,
                "dynamic": false,
                "info": "Whether the button is in the loading state.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "long": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "long",
                "value": false,
                "display_name": "Adaptive Width",
                "advanced": false,
                "dynamic": false,
                "info": "Whether the button width adapts to the container.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "shape": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "shape",
                "value": "",
                "display_name": "Button Shape",
                "advanced": false,
                "dynamic": false,
                "info": "The shape of the button.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "size": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "mini",
                  "small",
                  "medium",
                  "large"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "size",
                "value": "medium",
                "display_name": "Button Size",
                "advanced": false,
                "dynamic": false,
                "info": "The size of the button, can be mini, small, medium, large.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "slots": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "slots",
                "value": "",
                "display_name": "Slots",
                "advanced": false,
                "dynamic": false,
                "info": "Slots for the button, input as a string. e.g. 'icon'",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "status": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "normal",
                  "warning",
                  "success",
                  "danger"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "status",
                "value": "normal",
                "display_name": "Button Status",
                "advanced": false,
                "dynamic": false,
                "info": "The status of the button, can be normal, warning, success, danger.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "type": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "secondary",
                  "primary",
                  "dashed",
                  "outline",
                  "text"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "type",
                "value": "secondary",
                "display_name": "Button Type",
                "advanced": false,
                "dynamic": false,
                "info": "The type of the button, including secondary, primary, dashed, outline, text.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              }
            },
            "description": "A custom button component for Langflow.",
            "icon": "button",
            "base_classes": [
              "Data"
            ],
            "display_name": "Button Component",
            "documentation": "https://docs.langflow.org/components-custom-components",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "output",
                "hidden": null,
                "display_name": "Output",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "type",
              "shape",
              "status",
              "size",
              "long",
              "loading",
              "disabled",
              "html_type",
              "autofocus",
              "href",
              "events",
              "slots"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false
          },
          "showNode": true,
          "type": "ButtonComponent",
          "id": "CustomComponent-Krbbo"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 971
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-eWbFF",
        "type": "genericNode",
        "position": {
          "x": 355.84333126601166,
          "y": 19.72099126749226
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "# from langflow.field_typing import Data\nfrom langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema import Data\n\n\nclass CustomComponent(Component):\n    display_name = \"Custom Component\"\n    description = \"Use as a template to create your own component.\"\n    documentation: str = \"https://docs.langflow.org/components-custom-components\"\n    icon = \"code\"\n    name = \"CustomComponent\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Input Value\",\n            info=\"This is a custom component Input\",\n            value=\"Hello, World!\",\n            tool_mode=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Output\", name=\"output\", method=\"build_output\"),\n    ]\n\n    def build_output(self) -> Data:\n        data = Data(value=self.input_value)\n        self.status = data\n        return data\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "Hello, World!",
                "display_name": "Input Value",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "This is a custom component Input",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Use as a template to create your own component.",
            "icon": "code",
            "base_classes": [
              "Data"
            ],
            "display_name": "Custom Component",
            "documentation": "https://docs.langflow.org/components-custom-components",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "output",
                "display_name": "Output",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false
          },
          "showNode": true,
          "type": "CustomComponent",
          "id": "CustomComponent-eWbFF"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 249
        },
        "dragging": false
      },
      {
        "id": "TextInput-toMK5",
        "type": "genericNode",
        "position": {
          "x": 769.2848545281951,
          "y": -149.94121976836976
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "children": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "children",
                "value": "",
                "display_name": "Children ",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "在当前模块内嵌入该模块",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "close": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "close",
                "value": "",
                "display_name": "Close events",
                "advanced": false,
                "dynamic": false,
                "info": "Events for the button, input as a string. e.g. 'close'",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.io import (\n    HandleInput,\n    DataInput,\n    StrInput,\n    MessageInput,\n    MessageTextInput,\n    MultilineInput,\n    SecretStrInput,\n    IntInput,\n    FloatInput,\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FileInput,\n    Output\n)\nfrom langflow.schema.message import Message\n\n\nclass ButtonComponent(Component):\n    display_name = \"Button Component\"\n    description = \"A custom button component for Langflow.\"\n    icon = \"button\"\n    name = \"ButtonComponent\"\n\n    # 定义组件的输入，包含 Props、Events 和 Slots\n    inputs = [\n        # Props 输入\n        DropdownInput(\n            name=\"type\",\n            display_name=\"Button Type\",\n            info=\"The type of the button, including secondary, primary, dashed, outline, text.\",\n            options=[\"secondary\", \"primary\", \"dashed\", \"outline\", \"text\"],\n            value=\"secondary\"\n        ),\n        DropdownInput(\n            name=\"status\",\n            display_name=\"Button Status\",\n            info=\"The status of the button, can be normal, warning, success, danger.\",\n            options=[\"normal\", \"warning\", \"success\", \"danger\"],\n            value=\"normal\"\n        ),\n        # 添加 size 的输入\n        DropdownInput(\n            name=\"size\",\n            display_name=\"Button Size\",\n            info=\"The size of the button, can be mini, small, medium, large.\",\n            options=[\"mini\", \"small\", \"medium\", \"large\"],\n            value=\"medium\"\n        ),\n        BoolInput(\n            name=\"long\",\n            display_name=\"Adaptive Width\",\n            info=\"Whether the button width adapts to the container.\",\n            value=False\n        ),\n\n        ## Event\n        StrInput(\n            name=\"open\",\n            display_name=\"Open event\",\n            info=\"Events for the button, input as a string. e.g. 'open'\",\n            value=\"\"\n        ),\n        StrInput(\n            name=\"close\",\n            display_name=\"Close events\",\n            info=\"Events for the button, input as a string. e.g. 'close'\",\n            value=\"\"\n        ),\n\n        ## 内嵌子模块\n        MultilineInput(\n            name=\"children\",\n            display_name=\"Children \",\n            info=\"在当前模块内嵌入该模块\",\n        ),\n    ]\n\n    # 定义组件的输出\n    outputs = [\n        Output(display_name=\"Message\", name=\"output\", method=\"build_output\"),\n    ]\n\n    def build_output(self) -> Message:\n        # Props\n        type_prop = f'''type=\"{self.type}\"''' if self.type else ''\n        status_prop = f'''status=\"{self.status}\"''' if self.status else ''\n        size_prop = f'''size=\"{self.size}\"''' if self.size else ''\n\n        # Event\n        open_event = f'''@open=\"{self.open}\"''' if self.open else ''\n        close_event = f'''@close=\"{self.close}\"''' if self.close else ''\n\n        # 嵌套子模块\n        children = self.children if self.children else ''\n\n        # 去除多余空格\n        props_and_events = \" \".join(filter(None, [type_prop, status_prop, size_prop, open_event, close_event]))\n        result = f\"<a-button {props_and_events}> {children} </a-button>\"\n\n        return Message(\n            text=result,\n        )",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "long": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "long",
                "value": false,
                "display_name": "Adaptive Width",
                "advanced": false,
                "dynamic": false,
                "info": "Whether the button width adapts to the container.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "open": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "open",
                "value": "",
                "display_name": "Open event",
                "advanced": false,
                "dynamic": false,
                "info": "Events for the button, input as a string. e.g. 'open'",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "size": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "mini",
                  "small",
                  "medium",
                  "large"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "size",
                "value": "medium",
                "display_name": "Button Size",
                "advanced": false,
                "dynamic": false,
                "info": "The size of the button, can be mini, small, medium, large.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "status": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "normal",
                  "warning",
                  "success",
                  "danger"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "status",
                "value": "normal",
                "display_name": "Button Status",
                "advanced": false,
                "dynamic": false,
                "info": "The status of the button, can be normal, warning, success, danger.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "type": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "secondary",
                  "primary",
                  "dashed",
                  "outline",
                  "text"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "type",
                "value": "secondary",
                "display_name": "Button Type",
                "advanced": false,
                "dynamic": false,
                "info": "The type of the button, including secondary, primary, dashed, outline, text.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              }
            },
            "description": "A custom button component for Langflow.",
            "icon": "button",
            "base_classes": [
              "Message"
            ],
            "display_name": "Button Component",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "output",
                "hidden": null,
                "display_name": "Message",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "type",
              "status",
              "size",
              "long",
              "open",
              "close",
              "children"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false
          },
          "showNode": true,
          "type": "ButtonComponent",
          "id": "TextInput-toMK5"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 681
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-WZQRg",
        "type": "genericNode",
        "position": {
          "x": 459.4172723102495,
          "y": -67.80628285439889
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "align-center": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "align-center",
                "value": true,
                "display_name": "Align Center",
                "advanced": false,
                "dynamic": false,
                "info": "Whether the dialog is displayed in the center.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "before-close": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "before-close",
                "value": "",
                "display_name": "Before Close Event",
                "advanced": false,
                "dynamic": false,
                "info": "Triggered before the dialog is closed.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "before-open": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "before-open",
                "value": "",
                "display_name": "Before Open Event",
                "advanced": false,
                "dynamic": false,
                "info": "Triggered before the dialog is opened.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "body-class": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "body-class",
                "display_name": "Body Class",
                "advanced": false,
                "dynamic": false,
                "info": "The class name of the dialog content part.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "body-style": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "body-style",
                "display_name": "Body Style",
                "advanced": false,
                "dynamic": false,
                "info": "The style of the dialog content part.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "cancel": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "cancel",
                "value": "",
                "display_name": "Cancel Event",
                "advanced": false,
                "dynamic": false,
                "info": "Triggered when the cancel or close button is clicked.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "cancel-button-props": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "cancel-button-props",
                "display_name": "Cancel Button Props",
                "advanced": false,
                "dynamic": false,
                "info": "The Props of the cancel button.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "cancel-text": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "cancel-text",
                "display_name": "Cancel Text",
                "advanced": false,
                "dynamic": false,
                "info": "The content of the cancel button.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "closable": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "closable",
                "value": true,
                "display_name": "Closable",
                "advanced": false,
                "dynamic": false,
                "info": "Whether to display the close button.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "close": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "close",
                "value": "",
                "display_name": "Close Event",
                "advanced": false,
                "dynamic": false,
                "info": "Triggered after the dialog is closed (after the animation ends).",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.io import (\n    HandleInput,\n    DataInput,\n    StrInput,\n    MessageInput,\n    MessageTextInput,\n    MultilineInput,\n    SecretStrInput,\n    IntInput,\n    FloatInput,\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FileInput,\n    Output\n)\nfrom langflow.schema.message import Message\n\n\nclass ArcoModalComponent(Component):\n    display_name = \"Modal Component\"\n    description = \"A custom modal component for Langflow.\"\n    icon = \"modal\"\n    name = \"ModalComponent\"\n\n    # 定义组件的输入，包含 Props、Events 和 Slots\n    inputs = [\n        # Props 输入\n        BoolInput(\n            name=\"visible\",\n            display_name=\"Visible (v-model)\",\n            info=\"Whether the dialog is visible.\",\n            value=False\n        ),\n        BoolInput(\n            name=\"default-visible\",\n            display_name=\"Default Visible\",\n            info=\"Whether the dialog is visible by default (in uncontrolled state).\",\n            value=False\n        ),\n        StrInput(\n            name=\"width\",\n            display_name=\"Width\",\n            info=\"The width of the dialog. If not set, the width value in the style will be used.\",\n            value=None\n        ),\n        StrInput(\n            name=\"top\",\n            display_name=\"Top\",\n            info=\"The distance from the top of the dialog. It does not take effect when center display is enabled.\",\n            value=None\n        ),\n        BoolInput(\n            name=\"mask\",\n            display_name=\"Mask\",\n            info=\"Whether to display the mask layer.\",\n            value=True\n        ),\n        StrInput(\n            name=\"title\",\n            display_name=\"Title\",\n            info=\"The title of the dialog.\",\n            value=None\n        ),\n        DropdownInput(\n            name=\"title-align\",\n            display_name=\"Title Align\",\n            info=\"The horizontal alignment direction of the title.\",\n            options=[\"start\", \"center\"],\n            value=\"center\"\n        ),\n        BoolInput(\n            name=\"align-center\",\n            display_name=\"Align Center\",\n            info=\"Whether the dialog is displayed in the center.\",\n            value=True\n        ),\n        BoolInput(\n            name=\"unmount-on-close\",\n            display_name=\"Unmount on Close\",\n            info=\"Whether to unmount the node when closing.\",\n            value=False\n        ),\n        BoolInput(\n            name=\"mask-closable\",\n            display_name=\"Mask Closable\",\n            info=\"Whether the dialog can be closed by clicking on the mask layer.\",\n            value=True\n        ),\n        BoolInput(\n            name=\"hide-cancel\",\n            display_name=\"Hide Cancel\",\n            info=\"Whether to hide the cancel button.\",\n            value=False\n        ),\n        StrInput(\n            name=\"simple\",\n            display_name=\"Simple\",\n            info=\"Whether to enable the simple mode.\",\n            value=\"(props: any) => {  return props.notice;}\"\n        ),\n        BoolInput(\n            name=\"closable\",\n            display_name=\"Closable\",\n            info=\"Whether to display the close button.\",\n            value=True\n        ),\n        StrInput(\n            name=\"ok-text\",\n            display_name=\"OK Text\",\n            info=\"The content of the confirm button.\",\n            value=None\n        ),\n        StrInput(\n            name=\"cancel-text\",\n            display_name=\"Cancel Text\",\n            info=\"The content of the cancel button.\",\n            value=None\n        ),\n        BoolInput(\n            name=\"ok-loading\",\n            display_name=\"OK Loading\",\n            info=\"Whether the confirm button is in the loading state.\",\n            value=False\n        ),\n        DictInput(\n            name=\"ok-button-props\",\n            display_name=\"OK Button Props\",\n            info=\"The Props of the confirm button.\",\n            value=None\n        ),\n        DictInput(\n            name=\"cancel-button-props\",\n            display_name=\"Cancel Button Props\",\n            info=\"The Props of the cancel button.\",\n            value=None\n        ),\n        BoolInput(\n            name=\"footer\",\n            display_name=\"Footer\",\n            info=\"Whether to display the footer part.\",\n            value=True\n        ),\n        BoolInput(\n            name=\"render-to-body\",\n            display_name=\"Render to Body\",\n            info=\"Whether the dialog is mounted under the 'body' element.\",\n            value=True\n        ),\n        StrInput(\n            name=\"popup-container\",\n            display_name=\"Popup Container\",\n            info=\"The mounting container of the pop - up box.\",\n            value=\"body\"\n        ),\n        DictInput(\n            name=\"mask-style\",\n            display_name=\"Mask Style\",\n            info=\"The style of the mask layer.\",\n            value=None\n        ),\n        StrInput(\n            name=\"modal-class\",\n            display_name=\"Modal Class\",\n            info=\"The class name of the dialog.\",\n            value=None\n        ),\n        DictInput(\n            name=\"modal-style\",\n            display_name=\"Modal Style\",\n            info=\"The style of the dialog.\",\n            value=None\n        ),\n        StrInput(\n            name=\"on-before-ok\",\n            display_name=\"On Before OK\",\n            info=\"The callback function before the 'ok' event is triggered. If it returns false, subsequent events will not be triggered, and 'done' can also be used for asynchronous closing.\",\n            value=None\n        ),\n        StrInput(\n            name=\"on-before-cancel\",\n            display_name=\"On Before Cancel\",\n            info=\"The callback function before the 'cancel' event is triggered. If it returns false, subsequent events will not be triggered.\",\n            value=None\n        ),\n        BoolInput(\n            name=\"esc-to-close\",\n            display_name=\"ESC to Close\",\n            info=\"Whether to support closing the dialog with the ESC key.\",\n            value=True\n        ),\n        BoolInput(\n            name=\"draggable\",\n            display_name=\"Draggable\",\n            info=\"Whether to support dragging.\",\n            value=False\n        ),\n        BoolInput(\n            name=\"fullscreen\",\n            display_name=\"Fullscreen\",\n            info=\"Whether to enable full - screen mode.\",\n            value=False\n        ),\n        StrInput(\n            name=\"mask-animation-name\",\n            display_name=\"Mask Animation Name\",\n            info=\"The animation name of the mask layer.\",\n            value=None\n        ),\n        StrInput(\n            name=\"modal-animation-name\",\n            display_name=\"Modal Animation Name\",\n            info=\"The animation name of the dialog.\",\n            value=None\n        ),\n        StrInput(\n            name=\"body-class\",\n            display_name=\"Body Class\",\n            info=\"The class name of the dialog content part.\",\n            value=None\n        ),\n        DictInput(\n            name=\"body-style\",\n            display_name=\"Body Style\",\n            info=\"The style of the dialog content part.\",\n            value=None\n        ),\n        BoolInput(\n            name=\"hide-title\",\n            display_name=\"Hide Title\",\n            info=\"Whether to hide the title.\",\n            value=False\n        ),\n\n        # Event\n        StrInput(\n            name=\"ok\",\n            display_name=\"OK Event\",\n            info=\"Triggered when the confirm button is clicked.\",\n            value=\"\"\n        ),\n        StrInput(\n            name=\"cancel\",\n            display_name=\"Cancel Event\",\n            info=\"Triggered when the cancel or close button is clicked.\",\n            value=\"\"\n        ),\n        StrInput(\n            name=\"open\",\n            display_name=\"Open Event\",\n            info=\"Triggered after the dialog is opened (after the animation ends).\",\n            value=\"\"\n        ),\n        StrInput(\n            name=\"close\",\n            display_name=\"Close Event\",\n            info=\"Triggered after the dialog is closed (after the animation ends).\",\n            value=\"\"\n        ),\n        StrInput(\n            name=\"before-open\",\n            display_name=\"Before Open Event\",\n            info=\"Triggered before the dialog is opened.\",\n            value=\"\"\n        ),\n        StrInput(\n            name=\"before-close\",\n            display_name=\"Before Close Event\",\n            info=\"Triggered before the dialog is closed.\",\n            value=\"\"\n        ),\n\n        # 内嵌子模块\n        MultilineInput(\n            name=\"title_slot\",\n            display_name=\"Title Slot\",\n            info=\"The content for the title slot.\"\n        ),\n        MultilineInput(\n            name=\"footer_slot\",\n            display_name=\"Footer Slot\",\n            info=\"The content for the footer slot.\"\n        )\n    ]\n\n    # 定义组件的输出\n    outputs = [\n        Output(display_name=\"Message\", name=\"output\", method=\"build_output\"),\n    ]\n\n    def build_output(self) -> Message:\n        # Props\n        visible_prop = f'''v-model:visible=\"{self.visible}\"''' if self.visible is not None else ''\n        default_visible_prop = f'''default-visible=\"{self['default-visible']}\"''' if self['default-visible'] is not None else ''\n        width_prop = f'''width=\"{self.width}\"''' if self.width else ''\n        top_prop = f'''top=\"{self.top}\"''' if self.top else ''\n        mask_prop = f'''mask=\"{self.mask}\"''' if self.mask is not None else ''\n        title_prop = f'''title=\"{self.title}\"''' if self.title else ''\n        title_align_prop = f'''title-align=\"{self['title-align']}\"''' if self['title-align'] else ''\n        align_center_prop = f'''align-center=\"{self['align-center']}\"''' if self['align-center'] is not None else ''\n        unmount_on_close_prop = f'''unmount-on-close=\"{self['unmount-on-close']}\"''' if self['unmount-on-close'] is not None else ''\n        mask_closable_prop = f'''mask-closable=\"{self['mask-closable']}\"''' if self['mask-closable'] is not None else ''\n        hide_cancel_prop = f'''hide-cancel=\"{self['hide-cancel']}\"''' if self['hide-cancel'] is not None else ''\n        simple_prop = f'''simple=\"{self.simple}\"''' if self.simple else ''\n        closable_prop = f'''closable=\"{self.closable}\"''' if self.closable is not None else ''\n        ok_text_prop = f'''ok-text=\"{self['ok-text']}\"''' if self['ok-text'] else ''\n        cancel_text_prop = f'''cancel-text=\"{self['cancel-text']}\"''' if self['cancel-text'] else ''\n        ok_loading_prop = f'''ok-loading=\"{self['ok-loading']}\"''' if self['ok-loading'] is not None else ''\n        ok_button_props_prop = f'''ok-button-props=\"{self['ok-button-props']}\"''' if self['ok-button-props'] else ''\n        cancel_button_props_prop = f'''cancel-button-props=\"{self['cancel-button-props']}\"''' if self['cancel-button-props'] else ''\n        footer_prop = f'''footer=\"{self.footer}\"''' if self.footer is not None else ''\n        render_to_body_prop = f'''render-to-body=\"{self['render-to-body']}\"''' if self['render-to-body'] is not None else ''\n        popup_container_prop = f'''popup-container=\"{self['popup-container']}\"''' if self['popup-container'] else ''\n        mask_style_prop = f'''mask-style=\"{self['mask-style']}\"''' if self['mask-style'] else ''\n        modal_class_prop = f'''modal-class=\"{self['modal-class']}\"''' if self['modal-class'] else ''\n        modal_style_prop = f'''modal-style=\"{self['modal-style']}\"''' if self['modal-style'] else ''\n        on_before_ok_prop = f'''on-before-ok=\"{self['on-before-ok']}\"''' if self['on-before-ok'] else ''\n        on_before_cancel_prop = f'''on-before-cancel=\"{self['on-before-cancel']}\"''' if self['on-before-cancel'] else ''\n        esc_to_close_prop = f'''esc-to-close=\"{self['esc-to-close']}\"''' if self['esc-to-close'] is not None else ''\n        draggable_prop = f'''draggable=\"{self.draggable}\"''' if self.draggable is not None else ''\n        fullscreen_prop = f'''fullscreen=\"{self.fullscreen}\"''' if self.fullscreen is not None else ''\n        mask_animation_name_prop = f'''mask-animation-name=\"{self['mask-animation-name']}\"''' if self['mask-animation-name'] else ''\n        modal_animation_name_prop = f'''modal-animation-name=\"{self['modal-animation-name']}\"''' if self['modal-animation-name'] else ''\n        body_class_prop = f'''body-class=\"{self['body-class']}\"''' if self['body-class'] else ''\n        body_style_prop = f'''body-style=\"{self['body-style']}\"''' if self['body-style'] else ''\n        hide_title_prop = f'''hide-title=\"{self['hide-title']}\"''' if self['hide-title'] is not None else ''\n\n        # Event\n        ok_event = f'''@ok=\"{self.ok}\"''' if self.ok else ''\n        cancel_event = f'''@cancel=\"{self.cancel}\"''' if self.cancel else ''\n        open_event = f'''@open=\"{self.open}\"''' if self.open else ''\n        close_event = f'''@close=\"{self.close}\"''' if self.close else ''\n        before_open_event = f'''@before-open=\"{self['before-open']}\"''' if self['before-open'] else ''\n        before_close_event = f'''@before-close=\"{self['before-close']}\"''' if self['before-close'] else ''\n\n        # 嵌套子模块\n        title_slot = f'''<template #title>{self.title_slot}</template>''' if self.title_slot else ''\n        footer_slot = f'''<template #footer>{self.footer_slot}</template>''' if self.footer_slot else ''\n\n        # 去除多余空格\n        props_and_events = \" \".join(filter(None, [\n            visible_prop, default_visible_prop, width_prop, top_prop, mask_prop, title_prop, title_align_prop,\n            align_center_prop, unmount_on_close_prop, mask_closable_prop, hide_cancel_prop, simple_prop,\n            closable_prop, ok_text_prop, cancel_text_prop, ok_loading_prop, ok_button_props_prop,\n            cancel_button_props_prop, footer_prop, render_to_body_prop, popup_container_prop, mask_style_prop,\n            modal_class_prop, modal_style_prop, on_before_ok_prop, on_before_cancel_prop, esc_to_close_prop,\n            draggable_prop, fullscreen_prop, mask_animation_name_prop, modal_animation_name_prop, body_class_prop,\n            body_style_prop, hide_title_prop, ok_event, cancel_event, open_event, close_event, before_open_event,\n            before_close_event\n        ]))\n        result = f\"<a-modal {props_and_events}> {title_slot} {footer_slot} </a-modal>\"\n\n        return Message(\n            text=result,\n        )",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "default-visible": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "default-visible",
                "value": false,
                "display_name": "Default Visible",
                "advanced": false,
                "dynamic": false,
                "info": "Whether the dialog is visible by default (in uncontrolled state).",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "draggable": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "draggable",
                "value": false,
                "display_name": "Draggable",
                "advanced": false,
                "dynamic": false,
                "info": "Whether to support dragging.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "esc-to-close": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "esc-to-close",
                "value": true,
                "display_name": "ESC to Close",
                "advanced": false,
                "dynamic": false,
                "info": "Whether to support closing the dialog with the ESC key.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "footer": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "footer",
                "value": true,
                "display_name": "Footer",
                "advanced": false,
                "dynamic": false,
                "info": "Whether to display the footer part.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "footer_slot": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "footer_slot",
                "value": "",
                "display_name": "Footer Slot",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The content for the footer slot.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "fullscreen": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "fullscreen",
                "value": false,
                "display_name": "Fullscreen",
                "advanced": false,
                "dynamic": false,
                "info": "Whether to enable full - screen mode.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "hide-cancel": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "hide-cancel",
                "value": false,
                "display_name": "Hide Cancel",
                "advanced": false,
                "dynamic": false,
                "info": "Whether to hide the cancel button.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "hide-title": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "hide-title",
                "value": false,
                "display_name": "Hide Title",
                "advanced": false,
                "dynamic": false,
                "info": "Whether to hide the title.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "mask": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "mask",
                "value": true,
                "display_name": "Mask",
                "advanced": false,
                "dynamic": false,
                "info": "Whether to display the mask layer.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "mask-animation-name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "mask-animation-name",
                "display_name": "Mask Animation Name",
                "advanced": false,
                "dynamic": false,
                "info": "The animation name of the mask layer.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "mask-closable": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "mask-closable",
                "value": true,
                "display_name": "Mask Closable",
                "advanced": false,
                "dynamic": false,
                "info": "Whether the dialog can be closed by clicking on the mask layer.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "mask-style": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "mask-style",
                "display_name": "Mask Style",
                "advanced": false,
                "dynamic": false,
                "info": "The style of the mask layer.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "modal-animation-name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "modal-animation-name",
                "display_name": "Modal Animation Name",
                "advanced": false,
                "dynamic": false,
                "info": "The animation name of the dialog.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "modal-class": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "modal-class",
                "display_name": "Modal Class",
                "advanced": false,
                "dynamic": false,
                "info": "The class name of the dialog.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "modal-style": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "modal-style",
                "display_name": "Modal Style",
                "advanced": false,
                "dynamic": false,
                "info": "The style of the dialog.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "ok": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ok",
                "value": "",
                "display_name": "OK Event",
                "advanced": false,
                "dynamic": false,
                "info": "Triggered when the confirm button is clicked.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "ok-button-props": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ok-button-props",
                "display_name": "OK Button Props",
                "advanced": false,
                "dynamic": false,
                "info": "The Props of the confirm button.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "ok-loading": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ok-loading",
                "value": false,
                "display_name": "OK Loading",
                "advanced": false,
                "dynamic": false,
                "info": "Whether the confirm button is in the loading state.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "ok-text": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ok-text",
                "display_name": "OK Text",
                "advanced": false,
                "dynamic": false,
                "info": "The content of the confirm button.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "on-before-cancel": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "on-before-cancel",
                "display_name": "On Before Cancel",
                "advanced": false,
                "dynamic": false,
                "info": "The callback function before the 'cancel' event is triggered. If it returns false, subsequent events will not be triggered.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "on-before-ok": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "on-before-ok",
                "display_name": "On Before OK",
                "advanced": false,
                "dynamic": false,
                "info": "The callback function before the 'ok' event is triggered. If it returns false, subsequent events will not be triggered, and 'done' can also be used for asynchronous closing.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "open": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "open",
                "value": "",
                "display_name": "Open Event",
                "advanced": false,
                "dynamic": false,
                "info": "Triggered after the dialog is opened (after the animation ends).",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "popup-container": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "popup-container",
                "value": "body",
                "display_name": "Popup Container",
                "advanced": false,
                "dynamic": false,
                "info": "The mounting container of the pop - up box.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "render-to-body": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "render-to-body",
                "value": true,
                "display_name": "Render to Body",
                "advanced": false,
                "dynamic": false,
                "info": "Whether the dialog is mounted under the 'body' element.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "simple": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "simple",
                "value": "(props: any) => {  return props.notice;}",
                "display_name": "Simple",
                "advanced": false,
                "dynamic": false,
                "info": "Whether to enable the simple mode.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "title": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "title",
                "display_name": "Title",
                "advanced": false,
                "dynamic": false,
                "info": "The title of the dialog.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "title-align": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "start",
                  "center"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "title-align",
                "value": "center",
                "display_name": "Title Align",
                "advanced": false,
                "dynamic": false,
                "info": "The horizontal alignment direction of the title.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "title_slot": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "title_slot",
                "value": "",
                "display_name": "Title Slot",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The content for the title slot.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "top": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "top",
                "display_name": "Top",
                "advanced": false,
                "dynamic": false,
                "info": "The distance from the top of the dialog. It does not take effect when center display is enabled.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "unmount-on-close": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "unmount-on-close",
                "value": false,
                "display_name": "Unmount on Close",
                "advanced": false,
                "dynamic": false,
                "info": "Whether to unmount the node when closing.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "visible": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "visible",
                "value": false,
                "display_name": "Visible (v-model)",
                "advanced": false,
                "dynamic": false,
                "info": "Whether the dialog is visible.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "width": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "width",
                "display_name": "Width",
                "advanced": false,
                "dynamic": false,
                "info": "The width of the dialog. If not set, the width value in the style will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "A custom modal component for Langflow.",
            "icon": "modal",
            "base_classes": [
              "Message"
            ],
            "display_name": "Modal Component",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "output",
                "hidden": null,
                "display_name": "Message",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "visible",
              "default-visible",
              "width",
              "top",
              "mask",
              "title",
              "title-align",
              "align-center",
              "unmount-on-close",
              "mask-closable",
              "hide-cancel",
              "simple",
              "closable",
              "ok-text",
              "cancel-text",
              "ok-loading",
              "ok-button-props",
              "cancel-button-props",
              "footer",
              "render-to-body",
              "popup-container",
              "mask-style",
              "modal-class",
              "modal-style",
              "on-before-ok",
              "on-before-cancel",
              "esc-to-close",
              "draggable",
              "fullscreen",
              "mask-animation-name",
              "modal-animation-name",
              "body-class",
              "body-style",
              "hide-title",
              "ok",
              "cancel",
              "open",
              "close",
              "before-open",
              "before-close",
              "title_slot",
              "footer_slot"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false
          },
          "showNode": true,
          "type": "ModalComponent",
          "id": "CustomComponent-WZQRg"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 2991
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-teK4Q",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "Agent-NnRnc",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ChatInput-teK4Q{œdataTypeœ:œChatInputœ,œidœ:œChatInput-teK4Qœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Agent-NnRnc{œfieldNameœ:œinput_valueœ,œidœ:œAgent-NnRncœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ChatInput-teK4Q",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-teK4Qœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Agent-NnRnc",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAgent-NnRncœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Agent",
            "id": "Agent-NnRnc",
            "name": "response",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-zq5Xg",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-Agent-NnRnc{œdataTypeœ:œAgentœ,œidœ:œAgent-NnRncœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-zq5Xg{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-zq5Xgœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "Agent-NnRnc",
        "sourceHandle": "{œdataTypeœ:œAgentœ,œidœ:œAgent-NnRncœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-zq5Xg",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-zq5Xgœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "CalculatorComponent",
            "id": "CalculatorComponent-NSK57",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-NnRnc",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-CalculatorComponent-NSK57{œdataTypeœ:œCalculatorComponentœ,œidœ:œCalculatorComponent-NSK57œ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-NnRnc{œfieldNameœ:œtoolsœ,œidœ:œAgent-NnRncœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "source": "CalculatorComponent-NSK57",
        "sourceHandle": "{œdataTypeœ:œCalculatorComponentœ,œidœ:œCalculatorComponent-NSK57œ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-NnRnc",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-NnRncœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false
      }
    ],
    "viewport": {
      "x": 462.62719951353233,
      "y": 90.83306199409537,
      "zoom": 0.2649550816439431
    }
  },
  "updated_at": "2025-03-05T12:08:10+00:00",
  "icon": null,
  "name": "Arco-Agent",
  "description": "A simple but powerful starter agent.",
  "icon_bg_color": null,
  "webhook": false,
  "user_id": "b4ea31ed-898f-4be5-a941-7128aae107c0",
  "endpoint_name": null
}